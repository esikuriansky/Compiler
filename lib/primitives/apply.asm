
APPLY:
	PUSH(FP);
	MOV(FP, SP);

	MOV(R16, FPARG(2));		

	MOV(R19, IMM(0));			
	MOV(R16, FPARG(3));			
	MOV(R17, SP);				

L_APPLY_ARG_LOOP:
    CMP(R16, SOB_NIL);
    JUMP_EQ(L_APPLY_ARG_LOOP_DONE);
   	PUSH(INDD(R16,IMM(1)));
   	INCR(R19);
    MOV(R16, INDD(R16, 2));
    JUMP(L_APPLY_ARG_LOOP);

L_APPLY_ARG_LOOP_DONE:
	MOV(R16, SP);
	DECR(R16);
	L_APPLY_REVERSE_LOOP:
	CMP(R17, R16);
	JUMP_GE(L_APPLY_LOOP);
	MOV(R18, STACK(R17));
	MOV(STACK(R17), STACK(R16));
	MOV(STACK(R16), R18);
	SUB(R16, IMM(1));
	ADD(R17, IMM(1));
	JUMP(L_APPLY_REVERSE_LOOP);

L_APPLY_LOOP:
	PUSH(R19);				
	MOV(R16, FPARG(2));		
	PUSH(INDD(R16, IMM(1)));		
	PUSH(FPARG(-IMM(1)));		
	MOV(R17, FPARG(-2));
	ADD(R19, 3);		
	PUSH(R19);
	PUSH(FP);	
	MOV(R18, FP);
	SUB(R18, 4);				
	SUB(R18, FPARG(IMM(1)));		
	PUSH(R18);
	CALL(STACKCPY);
	DROP(1);
	DROP(1);
	DROP(1);
	MOV(FP, R17);
	ADD(R18, R19);
	MOV(SP, R18);
	JUMPA((void *) INDD(R16, 2));

  POP(FP);
  RETURN;
