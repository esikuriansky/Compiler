
MULTIPLY:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R10);
  PUSH(R11);
  PUSH(R12);
  PUSH(R13);

  MOV(R1, FPARG(1)); // Num of args

  // CHECK IF ZERO ARGS
  CMP(R1, 0);
  JUMP_NE(CONTINUE_MULTIPLY);

  // MAKE 1 OBJECT AND RETURN
  PUSH(IMM(1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  JUMP(MULTIPLY_END);

CONTINUE_MULTIPLY:

  MOV(R2, 0);
  MOV(R3, FPARG(R2 + 2)); // R3 Holds current element

  CMP(IND(R3), T_FRACTION);
  JUMP_EQ(MUL_ONE_ARG_CHECK);

  // TRANSFORM ARG TO FRACTION
  PUSH(1);
  MOV(R10, INDD(R3, 1));
  PUSH(R10);
  PUSH(1);
  CALL(MAKE_SOB_FRACTION);
  DROP(3);
  MOV(R3, R0);

MUL_ONE_ARG_CHECK:
  ADD(R2, 1);
  CMP(R2, R1);
  JUMP_EQ(PRE_MULTIPLY_END);



MUL_LOOP:

	MOV(R4, FPARG(R2 + 2));

	CMP(IND(R4), T_FRACTION);
  JUMP_EQ(MUL_WITH_FRACTION);

  MOV(R10, INDD(R4, 1));
  PUSH(1);
  PUSH(R10);
  PUSH(1);
  CALL(MAKE_SOB_FRACTION);
  DROP(3);
  MOV(R4, R0);

MUL_WITH_FRACTION:
	PUSH(R3);
	PUSH(R4);
	CALL(MUL_FRACS);
	DROP(2);
	MOV(R3, R0);

	ADD(R2, 1);
	CMP(R2, R1);
	JUMP_EQ(PRE_MULTIPLY_END);
	JUMP(MUL_LOOP);


PRE_MULTIPLY_END:
  MOV(R0, R3);
  CMP(INDD(R0, 3), 1); 
  JUMP_NE(MUL_TRY_TO_REDUCE);

  MOV(R10, INDD(R0, 2))
  PUSH(R10);
  CALL(MAKE_SOB_INTEGER);
  DROP(1); 
  JUMP(MULTIPLY_END)

MUL_TRY_TO_REDUCE:

  MOV(R12, INDD(R0,2));
  MOV(R13, INDD(R0,3));
  REM(R12, R13);
  CMP(R12, 0);
  JUMP_NE(MUL_TRY_TO_REDUCE2);
  
  MOV(R12, INDD(R0,2));
  DIV(R12, R13);
  MOV(R0, R12);
  PUSH(R0);
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  JUMP(MULTIPLY_END);

MUL_TRY_TO_REDUCE2:

  MOV(R10, R0);
  PUSH(INDD(R0, 2));
  PUSH(INDD(R0, 3));
  CALL(GCD);
  DROP(2);

  MOV(R11, INDD(R10, 2));
  MOV(R12, INDD(R10, 3));
  DIV(R11, R0);
  DIV(R12, R0);

  PUSH(1);
  PUSH(R11);
  PUSH(R12);
  CALL(MAKE_SOB_FRACTION);
  DROP(3);

MULTIPLY_END:
  POP(R13);
  POP(R12);
  POP(R11);
  POP(R10);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;



